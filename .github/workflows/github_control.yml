name: GitHub Account Manager

on:
  workflow_dispatch:
    inputs:
      target_account:
        description: "Target GitHub username/org"
        required: true
      operation:
        description: "Select operation to perform"
        required: true
        default: "list_repos"
        type: choice
        options:
          - list_repos
          - create_repo
          - delete_repo
          - toggle_visibility
          - create_release
          - set_actions_permissions
          - run_workflow
          - cancel_workflows
          - clone_repo
          - rename_repo
      repo_name:
        description: "Repository name"
        required: false
      new_repo_name:
        description: "New repository name (for rename operation)"
        required: false
      tag_name:
        description: "Tag name for release (for create_release)"
        required: false
      release_title:
        description: "Release title (for create_release)"
        required: false
      asset_url:
        description: "Download URL for release asset (for create_release)"
        required: false
      actions_enabled:
        description: "Enable GitHub Actions? (true/false) (for set_actions_permissions)"
        required: false
      source_url:
        description: "Source repository URL to clone (for clone_repo)"
        required: false
      visibility:
        description: "Visibility for create/clone operations"
        required: false
        default: "private"
        type: choice
        options:
          - private
          - public
      use_cached_repos:
        description: "Use cached repository list?"
        required: false
        type: boolean
        default: true

jobs:
  get_repos:
    if: ${{ inputs.operation != 'create_repo' && inputs.operation != 'clone_repo' }}
    runs-on: ubuntu-latest
    outputs:
      repo_list: ${{ steps.set-repo-list.outputs.repo_list }}
    steps:
      - name: Check for cached repositories
        if: ${{ inputs.use_cached_repos }}
        uses: actions/download-artifact@v3
        with:
          name: repo-list
          path: .
        continue-on-error: true  # Prevent failure if artifact doesn't exist

      - name: Get repository list from cache
        if: ${{ inputs.use_cached_repos }}
        id: cached-repos
        run: |
          if [ -f "repo-list.txt" ]; then
            repo_list=$(cat repo-list.txt)
            echo "repo_list=$repo_list" >> $GITHUB_OUTPUT
            echo "Using cached repository list"
          else
            echo "No cached repository list found"
          fi

      - name: Get fresh repository list
        if: ${{ !inputs.use_cached_repos || !steps.cached-repos.outputs.repo_list }}
        uses: actions/github-script@v6
        id: fresh-repos
        with:
          github-token: ${{ secrets.MASTER_TOKEN }}
          script: |
            const targetAccount = '${{ inputs.target_account }}';
            try {
              // Try as organization
              const repos = await github.paginate(github.rest.repos.listForOrg, {
                org: targetAccount,
                type: 'all',
                per_page: 100,
              });
              return repos.map(repo => repo.name);
            } catch (orgError) {
              if (orgError.status === 404) {
                // Try as user
                const repos = await github.paginate(github.rest.repos.listForUser, {
                  username: targetAccount,
                  type: 'all',
                  per_page: 100,
                });
                return repos.map(repo => repo.name);
              }
              throw orgError;
            }

      - name: Set repository list
        id: set-repo-list
        run: |
          if [ -n "${{ steps.cached-repos.outputs.repo_list }}" ]; then
            echo "repo_list=${{ steps.cached-repos.outputs.repo_list }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ steps.fresh-repos.outputs.result }}" ]; then
            echo "repo_list=${{ steps.fresh-repos.outputs.result }}" >> $GITHUB_OUTPUT
            # Cache for next run if requested
            if ${{ inputs.use_cached_repos }}; then
              echo '${{ steps.fresh-repos.outputs.result }}' > repo-list.txt
            fi
          else
            echo "repo_list=[]" >> $GITHUB_OUTPUT
          fi

      - name: Upload repository list artifact
        if: ${{ inputs.use_cached_repos && steps.fresh-repos.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: repo-list
          path: repo-list.txt

  control:
    needs: get_repos
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install PyGithub==1.59.0 requests

      - name: Run control script
        env:
          GITHUB_TOKEN: ${{ secrets.MASTER_TOKEN }}
          TARGET_ACCOUNT: ${{ inputs.target_account }}
          OPERATION: ${{ inputs.operation }}
          REPO_NAME: ${{ inputs.repo_name }}
          NEW_REPO_NAME: ${{ inputs.new_repo_name }}
          TAG_NAME: ${{ inputs.tag_name }}
          RELEASE_TITLE: ${{ inputs.release_title }}
          ASSET_URL: ${{ inputs.asset_url }}
          ACTIONS_ENABLED: ${{ inputs.actions_enabled }}
          SOURCE_URL: ${{ inputs.source_url }}
          REPO_VISIBILITY: ${{ inputs.visibility }}
          REPO_CHOICES: ${{ needs.get_repos.outputs.repo_list }}
        run: python github_manager.py
