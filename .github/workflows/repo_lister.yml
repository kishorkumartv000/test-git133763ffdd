name: Repository Lister

on:
  workflow_dispatch:
    inputs:
      target_account:
        description: "Target GitHub username/org"
        required: true

jobs:
  list_repos:
    runs-on: ubuntu-latest
    outputs:
      repo_list: ${{ steps.list-repos.outputs.repo_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install PyGithub==1.59.0

      - name: List repositories
        id: list-repos
        env:
          GITHUB_TOKEN: ${{ secrets.MASTER_TOKEN }}
          TARGET_ACCOUNT: ${{ inputs.target_account }}
        run: |
          python -c "
          from github import Github, GithubException
          import os
          import json

          token = os.getenv('GITHUB_TOKEN')
          target_account = os.getenv('TARGET_ACCOUNT')
          
          try:
              g = Github(token)
              try:
                  # Try to get as organization
                  target = g.get_organization(target_account)
                  is_org = True
              except GithubException:
                  # If fails, try as user
                  target = g.get_user(target_account)
                  is_org = False
              
              # Get repositories with proper affiliation
              if is_org:
                  repos = target.get_repos(affiliation='owner', visibility='all')
              else:
                  # For user accounts, we need to use a different approach
                  repos = g.search_repositories(f'user:{target_account}')
              
              repo_list = [repo.name for repo in repos]
              
              # Save to file for artifact
              with open('repo-list.json', 'w') as f:
                  json.dump(repo_list, f)
                  
              # Set output
              print(f'repo_list={json.dumps(repo_list)}' >> $GITHUB_OUTPUT)
              print(f'Found {len(repo_list)} repositories')
              
          except Exception as e:
              print(f'Error: {str(e)}')
              exit(1)
          "

      - name: Upload repository list
        uses: actions/upload-artifact@v4
        with:
          name: repo-list
          path: repo-list.json
